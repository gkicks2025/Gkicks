version: '3.8'

services:
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gkicks-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MYSQL_HOST=mysql
      - MYSQL_USER=gkicks_user
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=gkicks
      - MYSQL_PORT=3306
      - JWT_SECRET=${JWT_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./public/uploads:/app/public/uploads
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - gkicks-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: gkicks-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: gkicks
      MYSQL_USER: gkicks_user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/mysql-setup.sql:/docker-entrypoint-initdb.d/01-setup.sql
      - ./database/complete-mysql-schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - gkicks-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gkicks-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
      - ./public:/var/www/html/public
    depends_on:
      - app
    networks:
      - gkicks-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: gkicks-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - gkicks-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer (Database Management - Optional)
  adminer:
    image: adminer:latest
    container_name: gkicks-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      - mysql
    networks:
      - gkicks-network
    profiles:
      - tools

  # Backup Service
  backup:
    image: mysql:8.0
    container_name: gkicks-backup
    restart: "no"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: gkicks
    command: ["/bin/bash", "/backup.sh"]
    depends_on:
      - mysql
    networks:
      - gkicks-network
    profiles:
      - backup

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  gkicks-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16